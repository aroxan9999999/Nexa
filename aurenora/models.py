import logging
import subprocess
from django.conf import settings
from django.core.exceptions import ValidationError
from django.db import models, transaction
from django.contrib.auth.models import Group, User
import os
import shutil
from django.utils import timezone
from datetime import datetime


User._meta.verbose_name = "üëª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
User._meta.verbose_name_plural = "üëª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"

Group._meta.verbose_name = "‚öîÔ∏è –ì—Ä—É–ø–ø–∞"
Group._meta.verbose_name_plural = "‚öîÔ∏è –ì—Ä—É–ø–ø—ã"



class CyberXXBot(models.Model):
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞",help_text="–ù–∞–∑–≤–∞–Ω–∏–µ, –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤ Father Bot, –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–æ—Ç–∞")
    username = models.CharField(max_length=255, unique=True, verbose_name="Username –±–æ—Ç–∞", help_text="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π username, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤ Father Bot")
    api_key = models.CharField(max_length=255, unique=True, verbose_name="API –∫–ª—é—á –±–æ—Ç–∞", help_text="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π API-–∫–ª—é—á, –≤—ã–¥–∞–Ω–Ω—ã–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞ –≤ Father Bot")
    base_url = models.URLField(verbose_name="–ë–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞", max_length=5000, help_text="–°—Å—ã–ª–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞")
    description_url = models.URLField(verbose_name="–°—Å—ã–ª–∫–∞ –Ω–∞ PWA", max_length=1000, blank=True, null=True, help_text="–°—Å—ã–ª–∫–∞")
    open_delay = models.IntegerField(verbose_name="–í—Ä–µ–º—è –¥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—ã–ª–∫–∏", default=10)
    active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    process_id = models.IntegerField(null=True, blank=True)


    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "üåç –¢–µ–ª–µ–≥—Ä–∞–º –ë–æ—Ç"
        verbose_name_plural = "üåç –ë–æ—Ç—ã"

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        indexes = [
            models.Index(fields=['username'], name='idx_username'),
            models.Index(fields=['api_key'], name='idx_api_key'),
            models.Index(fields=['active'], name='idx_active'),
        ]

        # –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        ordering = ['-created_at', 'username']


class LandingPage(models.Model):
    LANDING_TYPES = [('basic', '–ë–∞–∑–æ–≤—ã–π'), ('custom', '–ö–∞—Å—Ç–æ–º–Ω—ã–π')]
    bot = models.ForeignKey('CyberXXBot', on_delete=models.CASCADE, related_name='landing_pages', verbose_name="–ë–æ—Ç")
    landing_type = models.CharField(max_length=10, choices=LANDING_TYPES, default='basic', verbose_name="–¢–∏–ø –ª–µ–Ω–¥–∏–Ω–≥–∞", help_text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–µ–Ω–¥–∏–Ω–≥–∞: '–ë–∞–∑–æ–≤—ã–π' –∏–ª–∏ '–ö–∞—Å—Ç–æ–º–Ω—ã–π'.")
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ", help_text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–Ω–¥–∏–Ω–≥–∞.")
    subscriber_count = models.CharField(max_length=50, verbose_name="–ö-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", blank=True, null=True, help_text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).")
    description = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ", blank=True, null=True, help_text="–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–µ–Ω–¥–∏–Ω–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).")
    button_text = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏", blank=True, null=True, help_text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –∫–Ω–æ–ø–∫–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).")
    logo = models.ImageField(upload_to='logos/', verbose_name="–õ–æ–≥–æ—Ç–∏–ø –±–æ—Ç–∞", help_text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).")
    language = models.ForeignKey('Country', on_delete=models.SET_NULL, verbose_name="–Ø–∑—ã–∫", blank=True, null=True, help_text="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ª–µ–Ω–¥–∏–Ω–≥–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ).")
    custom_html_file = models.FileField(upload_to='custom_landings/', verbose_name="HTML —Ñ–∞–π–ª", blank=True, null=True, help_text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ HTML —Ñ–∞–π–ª –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ª–µ–Ω–¥–∏–Ω–≥–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∏–ø–∞).")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", help_text="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–µ–Ω–¥–∏–Ω–≥–∞.")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", help_text="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–µ–Ω–¥–∏–Ω–≥–∞.")
    google_analytics_id = models.CharField(max_length=20, blank=True, null=True, verbose_name="Google Analytics ID", help_text="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Google Analytics –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
    yandex_metrika_id = models.CharField(max_length=20, blank=True, null=True, verbose_name="–Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞ ID", help_text="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
    google_analytics_full_script = models.TextField(blank=True, null=True,verbose_name="–ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–ø—Ç Google Analytics", help_text="–ü–æ–ª–Ω—ã–π –∫–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è Google Analytics, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ.")
    yandex_metrika_full_script = models.TextField(blank=True, null=True, verbose_name="–ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏", help_text="–ü–æ–ª–Ω—ã–π –∫–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ.")

    def clean(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å HTML —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ª–µ–Ω–¥–∏–Ω–≥–∞."""
        if self.landing_type == 'custom' and not self.custom_html_file:
            raise ValidationError({'custom_html_file': 'HTML —Ñ–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ª–µ–Ω–¥–∏–Ω–≥–∞.'})

        if not self.bot.active:
            raise ValidationError(
                f"–ë–æ—Ç {self.bot.username} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ª–µ–Ω–¥–∏–Ω–≥ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞.")

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)

        if self.custom_html_file:
            source_path = self.custom_html_file.path
            destination_dir = os.path.join(settings.BASE_DIR, self._meta.app_label, 'templates', 'custom_landings')
            os.makedirs(destination_dir, exist_ok=True)  # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            destination_path = os.path.join(destination_dir, os.path.basename(source_path))

            shutil.copy(source_path, destination_path)
            super().save(*args, **kwargs)




    def __str__(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–Ω–¥–∏–Ω–≥–∞ –∏ —è–∑—ã–∫, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω, –∏–Ω–∞—á–µ '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'."""
        language_name = self.language.name if self.language else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
        return f"{self.name} ({language_name})"

    class Meta:
        verbose_name = "üåê –õ–µ–Ω–¥–∏–Ω–≥"
        verbose_name_plural = "üåê –õ–µ–Ω–¥–∏–Ω–≥–∏"

        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        indexes = [
            models.Index(fields=['bot', 'landing_type'], name='idx_bot_landing_type'),
            models.Index(fields=['name'], name='idx_name'),
        ]

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ordering = ['-created_at', 'name']


class Country(models.Model):
    code = models.CharField(max_length=20, unique=True, verbose_name="–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã", help_text="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'US' –¥–ª—è –°–®–ê –∏–ª–∏ 'RU' –¥–ª—è –†–æ—Å—Å–∏–∏).")
    name = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã", help_text="–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–°–®–ê' –∏–ª–∏ '–†–æ—Å—Å–∏—è').")

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "üó∫Ô∏è –°—Ç—Ä–∞–Ω–∞"
        verbose_name_plural = "üó∫Ô∏è –°—Ç—Ä–∞–Ω—ã"

        indexes = [
            models.Index(fields=['code'], name='country_code_idx'),
            models.Index(fields=['name'], name='country_name_idx'),
        ]

        ordering = ['name']

class UserProfile(models.Model):
    telegram_user_id = models.CharField(max_length=50, blank=True, null=True, verbose_name="Telegram user id", help_text="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.")
    node_id = models.CharField(max_length=100, null=True, blank=True)
    username = models.CharField(max_length=100, blank=True, null=True, verbose_name="Username", help_text="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.")
    full_name = models.CharField(max_length=100, blank=True, null=True, verbose_name="–§–ò–û", help_text="–ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    telegram_language = models.CharField(max_length=100, blank=True, null=True, verbose_name="–Ø–∑—ã–∫", help_text="–ö–æ–¥ —è–∑—ã–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'ru', 'en').")
    email = models.EmailField(max_length=254, blank=True, null=True, verbose_name="Email",help_text="Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    phone = models.CharField(max_length=16, blank=True, null=True, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω", help_text="–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567.")
    is_active_in_telegram = models.BooleanField(default=False, verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω—ã–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º?", help_text="–û—Ç–º–µ—Ç—å—Ç–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω –≤ Telegram.")
    bot = models.ForeignKey('CyberXXBot', on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–ë–æ—Ç", help_text="–±–æ—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º —Å–≤—è–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
    cyber_link = models.URLField(max_length=5000, blank=True, null=True, verbose_name="–°—Å—ã–ª–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏", help_text="–°—Å—ã–ª–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.")
    ip_address = models.GenericIPAddressField(blank=True, null=True, verbose_name="IP", help_text="IP-–∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    user_agent = models.TextField(blank=True, null=True, verbose_name="User Agent", help_text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    country = models.ForeignKey(Country, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–°—Ç—Ä–∞–Ω–∞", help_text="–°—Ç—Ä–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    city = models.CharField(max_length=100, blank=True, null=True, verbose_name="–ì–æ—Ä–æ–¥", help_text="–ì–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    timezone = models.CharField(max_length=50, blank=True, null=True, verbose_name="–¢–∞–π–º–∑–æ–Ω–∞", help_text="–¢–∞–π–º–∑–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'UTC+3').")
    registration_date = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", help_text="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ.")
    activate_start = models.DateTimeField(null=True, blank=True, verbose_name="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è", help_text="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.")



    def __str__(self):
        return f"TG: {self.telegram_user_id} - {self.username if self.username else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}"

    class Meta:
        verbose_name = "Ô∏è‚ò†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        verbose_name_plural = "‚ò†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"

        indexes = [
            models.Index(fields=['telegram_user_id'], name='idx_telgrm_uid'),
            models.Index(fields=['node_id'], name='idx_nodeid'),
            models.Index(fields=['is_active_in_telegram'], name='idx_is_active'),
            models.Index(fields=['bot'], name='idx_bot'),
            models.Index(fields=['country'], name='idx_country'),
            models.Index(fields=['registration_date'], name='idx_reg_date'),
        ]

        ordering = ['-registration_date', 'username']



class GeneralSetting(models.Model):
    key = models.CharField(max_length=255, unique=True, verbose_name="–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è", help_text="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    value = models.TextField(verbose_name="–ó–Ω–∞—á–µ–Ω–∏–µ", help_text="–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    description = models.CharField(max_length=255, verbose_name="–î–ª—è —á–µ–≥–æ", help_text="–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –¥–ª—è —á–µ–≥–æ –æ–Ω–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞.", blank=True, null=True)

    class Meta:
        verbose_name = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        verbose_name_plural = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"

        indexes = [
            models.Index(fields=['key'], name='idx_key')
        ]

        ordering = ['key']

    def __str__(self):
        return self.key
